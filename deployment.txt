#Cleanup Env

docker rmi -f abhisheknn/dockeragent
docker rmi -f abhisheknn/kafkafirstlevelproducer
docker rmi -f abhisheknn/containerid-to-imageid
docker rmi -f abhisheknn/elasticsearchsink
docker rmi -f abhisheknn/cassandrasink
docker rmi -f abhisheknn/container-to-mount
docker rmi -f abhisheknn/network-list-to-stream
docker rmi -f abhisheknn/policy-manager
docker rmi -f abhisheknn/token-manager-server
docker rmi -f abhisheknn/eureka

docker rm -f dockeragent
docker rm -f kafkafirstlevelproducer
docker rm -f containerid-to-imageid
docker rm -f elasticsearchsink
docker rm -f container-to-mount
docker rm -f redis
docker rm -f cassandrasink
docker rm -f network-list-to-stream
docker rm -f policy-manager
docker rm -f token-manager-server
docker rm -f eurekaService


#Eureka Service 
docker run --name eurekaService -p 8761:8761 -d abhisheknn/eureka:latest


#X-Server

#01 Deploy Kafka
git clone https://github.com/wurstmeister/kafka-docker.git
cd kafka-docker && docker-compose up -d  && cd ..

#02 Deploy X

ipOfMachine="$(ifconfig | grep -A 1 'ens160' | tail -1 | cut -d ':' -f 2 | cut -d ' ' -f 1)"
kafkaBrokerport="$(docker inspect kafkadocker_kafka_1  | grep HostPort | sort | uniq | grep -o [0-9]*)"
kafkabroker="$ipOfMachine:$kafkaBrokerport"

docker run -d --name kafkafirstlevelproducer  -p 8003:8003 -e KAFKABROKERS="$kafkabroker" -e TOKENMANAGERURL="$ipOfMachine" abhisheknn/kafkafirstlevelproducer

kafkaFirstLevelProducerport="$(docker inspect kafkafirstlevelproducer  | grep HostPort | sort | uniq | grep -o [0-9]*)"
microendpoint="$ipOfMachine"
hostname="$(hostname)"

docker run -d --name container-list-to-stream -e KAFKABROKERS="$kafkabroker" abhisheknn/container-list-to-stream
docker run -d --name containerid-to-imageid -e KAFKABROKERS="$kafkabroker" abhisheknn/containerid-to-imageid
docker run -d --name container-to-mount -e KAFKABROKERS="$kafkabroker" abhisheknn/container-to-mount
docker run -d --name network-list-to-stream -e KAFKABROKERS="$kafkabroker" abhisheknn/network-list-to-stream


#docker run -d --name mongodbsink -e KAFKABROKER="$kafkabroker" -e MONGODB_DATABASE=DockerX -e MONGODBUSERNAME=admin -e MONGODBPASSWORD=admin -e MONGODBPORT=27017 -e MONGODBHOST="$ipOfMachine"  abhisheknn/mongodbsink

#Cassandra on Kubernetes
git clone https://github.com/abhisheknn/Scalable-Cassandra-deployment-on-Kubernetes.git
cd /Scalable-Cassandra-deployment-on-Kubernetes/scripts
./quickstart.sh

#MySQL
docker run --name mysqldb -e MYSQL_USER=ab -p 3306:3306 -p 33060:33060 -e MYSQL_PASSWORD=xxxx -e MYSQL_ROOT_PASSWORD=xxxx -e MYSQL_DATABASE=dockerx -d mysql:latest


#Token Manager
docker run --name token-manager -e CASSANDRA_HOST=$ipOfMachine -e CASSANDRA_PORT=cassandraport -p 8004:8004 -d abhisheknn/token-manager-server
docker run --name token-manager -p 8004:8004 --network host  abhisheknn/token-manager-server:latest


#Policy Manager
docker run --name policy-manager -e CASSANDRA_HOST=$ipOfMachine -e CASSANDRA_PORT=cassandraport -p 8005:8080 -d abhisheknn/policy-manager


#HiveMq for MQTT Broker
docker run --name mqttbroker -p 8080:8080 -p 1883:1883 hivemq/hivemq4

mqttBrokerport="$(docker inspect mqttbroker  | grep HostPort | sort | uniq | grep -o [0-9]*)"
mqttbroker="$ipOfMachine:$mqttbroker"

#C2-System
docker run --name c2-system  -e MQTTBROKER=$mqttbroker -e MQTTCLIENTID=dev -d -p 8006:8080 abhisheknn/c2-system

#Cassandra Sink 
docker run --name cassandrasink -e CASSANDRA_HOST=$cassandrahost -e CASSANDRA_PORT=9042 -e COSUMERTOPICCONFIG='[{"topic":"dockerx.container_details","table":"dockerx.container_details"},{"topic":"dockerx.container_to_mount","table":"dockerx.container_to_mount"},{"topic":"dockerx.network_details","table":"dockerx.network_details"}]' -e KAFKA_BROKER=$kafkabroker  abhisheknn/cassandrasink

#Deploy Nginx 
sed -i 's/microendpoint/'"$ipOfMachine"'/g' ~/nginx/default.conf
docker run --name docker-nginx -p 80:80 -v ~/nginx/default.conf:/etc/nginx/conf.d/default.conf -d nginx



sudo sysctl -w vm.max_map_count=262144
#03 Deploy ElasticSerach and Grafana

docker network create mybridge
cd elasticsearch && docker-compose up -d && cd ..
docker run -d -p 3000:3000 --name=grafana -e "GF_SECURITY_ADMIN_PASSWORD=secret" grafana/grafana
docker network connect mybridge devdeployments_elasticsearch_1
docker network connect mybridge grafana


#04 Deploy  ElasticSerach Sink

ELASTICSEARCHHOST="$ipOfMachine"
elasticsearchports="$(docker inspect devdeployments_elasticsearch_1  | grep HostPort | sort | uniq | grep -o [0-9]*)"
elasticsearchportarray=(${elasticsearchports// //})
ELASTICSEARCHPORT=${elasticsearchportarray[0]}
docker run -d --name=elasticsearchsink -e KAFKABROKER="$kafkabroker" -e ELASTICSEARCHHOST="$ELASTICSEARCHHOST" -e ELASTICSEARCHPORT="$ELASTICSEARCHPORT" abhisheknn/elasticsearchsink



#X-Agent

docker run -d --name dockeragent -v /var/run/docker.sock:/var/run/docker.sock -e MICRO_ENDPOINT="$microendpoint" -e HOSTNAME="$hostname" -e MACADDRESS="11:12:13:14:15" TENANTID="dockerx" MQTTBROKER=$mqttbroker abhisheknn/dockeragent

